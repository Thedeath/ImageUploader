/*
 * Copyright (C) 2012 Thedeath<www.fseek.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package imageuploader.guiClasses;

import imageuploader.HistoryEntry;
import imageuploader.HistoryTableModel;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.net.URI;
import javax.swing.JTable;

/**
 *
 * @author Simon
 */
public class HistoryWindow extends javax.swing.JFrame
{

    private HistoryTableModel tableModel;
    private File historyFile = new File(System.getProperty("user.dir") + File.separator + "imgUplHistory.txt");

    private MainFrame mainFrame;
    
    /**
     * Creates new form HistoryWindow
     */
    public HistoryWindow(MainFrame mainFrame)
    {
        initComponents();
        this.mainFrame = mainFrame;
        tableModel = new HistoryTableModel(historyFile);
        this.historyTable.setModel(tableModel);
    }

    public void removeSelectedRows(JTable table)
    {
        int[] rows = table.getSelectedRows();
        for (int i = 0; i < rows.length; i++)
        {
            tableModel.removeRow(rows[i] - i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        historyTableScroller = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        fixWindowCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("History");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        historyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyTableMouseClicked(evt);
            }
        });
        historyTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                historyTableKeyReleased(evt);
            }
        });
        historyTableScroller.setViewportView(historyTable);

        fixWindowCheckbox.setSelected(true);
        fixWindowCheckbox.setText("Fix Window");
        fixWindowCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fixWindowCheckboxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(historyTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fixWindowCheckbox)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(historyTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fixWindowCheckbox))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void historyTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_historyTableKeyReleased
    {//GEN-HEADEREND:event_historyTableKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_DELETE)
        {
            removeSelectedRows((JTable)evt.getSource());
        }
    }//GEN-LAST:event_historyTableKeyReleased

    private void fixWindowCheckboxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_fixWindowCheckboxItemStateChanged
    {//GEN-HEADEREND:event_fixWindowCheckboxItemStateChanged
        MainFrame.fixWindow = fixWindowCheckbox.isSelected();
    }//GEN-LAST:event_fixWindowCheckboxItemStateChanged

    private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
    {//GEN-HEADEREND:event_formComponentResized
        if(MainFrame.fixWindow)
            MainFrame.setWindowLeft(mainFrame, this);
    }//GEN-LAST:event_formComponentResized

    private void formComponentMoved(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentMoved
    {//GEN-HEADEREND:event_formComponentMoved
        if(MainFrame.fixWindow)
            MainFrame.setWindowLeft(mainFrame, this);
    }//GEN-LAST:event_formComponentMoved

    private void historyTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_historyTableMouseClicked
    {//GEN-HEADEREND:event_historyTableMouseClicked
        if(evt.getClickCount() >= 2)
        {
            try
            {
                int rowAtPoint = historyTable.rowAtPoint(evt.getPoint());
                HistoryEntry row = tableModel.getRow(rowAtPoint);
                Desktop.getDesktop().browse(new URI(row.getUrl()));
            } catch (Exception ex)
            {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_historyTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox fixWindowCheckbox;
    private javax.swing.JTable historyTable;
    private javax.swing.JScrollPane historyTableScroller;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the tableModel
     */
    public HistoryTableModel getTableModel()
    {
        return tableModel;
    }
}
